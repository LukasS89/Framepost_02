// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: PCeP8ysIYFrO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import VideoMainThird from "../../VideoMainThird"; // plasmic-import: yXosNAhrnOsk/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import VideoPlayer from "../../VideoPlayer"; // plasmic-import: dFkllSNxNO3E/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicVideoSection.module.css"; // plasmic-import: PCeP8ysIYFrO/css

createPlasmicElementProxy;

export type PlasmicVideoSection__VariantMembers = {
  tab1: "tab1";
  tab2: "tab2";
  tab3: "tab3";
};
export type PlasmicVideoSection__VariantsArgs = {
  tab1?: SingleBooleanChoiceArg<"tab1">;
  tab2?: SingleBooleanChoiceArg<"tab2">;
  tab3?: SingleBooleanChoiceArg<"tab3">;
};
type VariantPropType = keyof PlasmicVideoSection__VariantsArgs;
export const PlasmicVideoSection__VariantProps = new Array<VariantPropType>(
  "tab1",
  "tab2",
  "tab3"
);

export type PlasmicVideoSection__ArgsType = {
  tabIndex?: number;
  onTabIndexChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicVideoSection__ArgsType;
export const PlasmicVideoSection__ArgProps = new Array<ArgPropType>(
  "tabIndex",
  "onTabIndexChange"
);

export type PlasmicVideoSection__OverridesType = {
  root?: Flex__<"div">;
  titleWrap?: Flex__<"div">;
  videoMainThird?: Flex__<typeof VideoMainThird>;
  timer?: Flex__<typeof Timer>;
  overlay?: Flex__<"div">;
  divider?: Flex__<"div">;
  left?: Flex__<"div">;
  h3?: Flex__<"h3">;
  right?: Flex__<"div">;
  videoPlayer?: Flex__<typeof VideoPlayer>;
  titleWrap2?: Flex__<"div">;
  videoMainThird2?: Flex__<typeof VideoMainThird>;
  titleWrap3?: Flex__<"div">;
  videoMainThird3?: Flex__<typeof VideoMainThird>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultVideoSectionProps {
  tabIndex?: number;
  onTabIndexChange?: (val: string) => void;
  tab1?: SingleBooleanChoiceArg<"tab1">;
  tab2?: SingleBooleanChoiceArg<"tab2">;
  tab3?: SingleBooleanChoiceArg<"tab3">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVideoSection__RenderFunc(props: {
  variants: PlasmicVideoSection__VariantsArgs;
  args: PlasmicVideoSection__ArgsType;
  overrides: PlasmicVideoSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tab1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.tabIndex === 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.tab1
      },
      {
        path: "tab2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.tabIndex === 2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.tab2
      },
      {
        path: "tab3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.tabIndex === 3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.tab3
      },
      {
        path: "tabIndex",
        type: "writable",
        variableType: "number",

        valueProp: "tabIndex",
        onChangeProp: "onTabIndexChange"
      },
      {
        path: "videoPlayer.videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
      },
      {
        path: "videoPlayer.isSet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tabContent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird2.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird3.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.roottab1]: hasVariant($state, "tab1", "tab1"),
          [sty.roottab2]: hasVariant($state, "tab2", "tab2"),
          [sty.roottab3]: hasVariant($state, "tab3", "tab3")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__lrHyw, {
          [sty.freeBoxtab1__lrHywLce00]: hasVariant($state, "tab1", "tab1"),
          [sty.freeBoxtab2__lrHywWaLvA]: hasVariant($state, "tab2", "tab2"),
          [sty.freeBoxtab3__lrHyw1IaHx]: hasVariant($state, "tab3", "tab3")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateUnnamedVariant"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["tabIndex"]
                  },
                  operation: 0,
                  value: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUnnamedVariant"] != null &&
            typeof $steps["updateUnnamedVariant"] === "object" &&
            typeof $steps["updateUnnamedVariant"].then === "function"
          ) {
            $steps["updateUnnamedVariant"] = await $steps[
              "updateUnnamedVariant"
            ];
          }

          $steps["updateVideoPlayerVideoPath"] = !$state.tabContent
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["videoPlayer", "videoPath"]
                  },
                  operation: 0,
                  value:
                    "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateVideoPlayerVideoPath"] != null &&
            typeof $steps["updateVideoPlayerVideoPath"] === "object" &&
            typeof $steps["updateVideoPlayerVideoPath"].then === "function"
          ) {
            $steps["updateVideoPlayerVideoPath"] = await $steps[
              "updateVideoPlayerVideoPath"
            ];
          }

          $steps["updateVideoMainThirdPressed"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["videoMainThird", "pressed"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateVideoMainThirdPressed"] != null &&
            typeof $steps["updateVideoMainThirdPressed"] === "object" &&
            typeof $steps["updateVideoMainThirdPressed"].then === "function"
          ) {
            $steps["updateVideoMainThirdPressed"] = await $steps[
              "updateVideoMainThirdPressed"
            ];
          }
        }}
        style={
          hasVariant($state, "tab3", "tab3")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab2", "tab2")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab1", "tab1")
            ? (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
      >
        <div
          data-plasmic-name={"titleWrap"}
          data-plasmic-override={overrides.titleWrap}
          className={classNames(projectcss.all, sty.titleWrap, {
            [sty.titleWraptab1]: hasVariant($state, "tab1", "tab1"),
            [sty.titleWraptab2]: hasVariant($state, "tab2", "tab2"),
            [sty.titleWraptab3]: hasVariant($state, "tab3", "tab3")
          })}
        >
          <VideoMainThird
            data-plasmic-name={"videoMainThird"}
            data-plasmic-override={overrides.videoMainThird}
            className={classNames("__wab_instance", sty.videoMainThird, {
              [sty.videoMainThirdtab1]: hasVariant($state, "tab1", "tab1"),
              [sty.videoMainThirdtab2]: hasVariant($state, "tab2", "tab2")
            })}
            onPressedChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "videoMainThird",
                "pressed"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            pressed={generateStateValueProp($state, [
              "videoMainThird",
              "pressed"
            ])}
          />
        </div>
        {(hasVariant($state, "tab1", "tab1") ? true : false) ? (
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer, {
              [sty.timertab1]: hasVariant($state, "tab1", "tab1")
            })}
            intervalSeconds={0.4}
            isRunning={(() => {
              try {
                return $state.tabIndex === 0 ? false : true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            onTick={async () => {
              const $steps = {};

              $steps["updateTabContent"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["tabContent"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTabContent"] != null &&
                typeof $steps["updateTabContent"] === "object" &&
                typeof $steps["updateTabContent"].then === "function"
              ) {
                $steps["updateTabContent"] = await $steps["updateTabContent"];
              }
            }}
            runWhileEditing={false}
          />
        ) : null}
        <div
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          className={classNames(projectcss.all, sty.overlay, {
            [sty.overlaytab1]: hasVariant($state, "tab1", "tab1")
          })}
          style={
            hasVariant($state, "tab1", "tab1")
              ? (() => {
                  try {
                    return {
                      opacity: "100%"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return {
                      opacity: "0%"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        />

        {(hasVariant($state, "tab1", "tab1") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__cnqec, {
              [sty.freeBoxtab1__cnqecLce00]: hasVariant($state, "tab1", "tab1")
            })}
            style={
              hasVariant($state, "tab1", "tab1")
                ? (() => {
                    try {
                      return {
                        opacity: $state.tabContent === true ? "1" : "0",
                        transition:
                          $state.tabContent === true
                            ? "opacity 200ms ease-in"
                            : "none"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
          >
            <div
              data-plasmic-name={"divider"}
              data-plasmic-override={overrides.divider}
              className={classNames(projectcss.all, sty.divider, {
                [sty.dividertab1]: hasVariant($state, "tab1", "tab1")
              })}
            >
              <div
                data-plasmic-name={"left"}
                data-plasmic-override={overrides.left}
                className={classNames(projectcss.all, sty.left, {
                  [sty.lefttab1]: hasVariant($state, "tab1", "tab1")
                })}
                style={(() => {
                  try {
                    return {
                      gap: "2vh"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3Mj2S, {
                    [sty.freeBoxtab1___3Mj2SLce00]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    )
                  })}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      sty.h2__wbw0A,
                      "titleA",
                      {
                        [sty.h2tab1__wbw0ALce00]: hasVariant(
                          $state,
                          "tab1",
                          "tab1"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vtboY,
                        {
                          [sty.texttab1__vtboYLce00]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                    >
                      {"Animovan\u00e1 videa"}
                    </div>
                  </h2>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      sty.h2__k8Sr,
                      "titleB",
                      {
                        [sty.h2tab1__k8SrLce00]: hasVariant(
                          $state,
                          "tab1",
                          "tab1"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vhYud,
                        {
                          [sty.texttab1__vhYudLce00]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                    >
                      {" pro reklamu\r"}
                    </div>
                  </h2>
                </div>
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(projectcss.all, projectcss.h3, sty.h3, {
                    [sty.h3tab1]: hasVariant($state, "tab1", "tab1")
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vsGZr,
                      {
                        [sty.texttab1__vsGZrLce00]: hasVariant(
                          $state,
                          "tab1",
                          "tab1"
                        )
                      }
                    )}
                  >
                    {
                      "Reklamn\u00ed vizu\u00e1ln\u00ed efekty, grafika a obrazov\u00e1 postprodukce jsou kl\u00ed\u010dov\u00fdmi prvky v tvorb\u011b \u00fasp\u011b\u0161n\u00fdch reklamn\u00edch kampan\u00ed. Vizu\u00e1ln\u00ed efekty, jako animace, efekty a digit\u00e1ln\u00ed zpracov\u00e1n\u00ed obrazu, dod\u00e1vaj\u00ed reklam\u011b dynamiku a vizu\u00e1ln\u00ed zaj\u00edmavost.\r\n\r\n\nObrazov\u00e1 postprodukce umo\u017e\u0148uje \u00fapravy barev, kontrastu a zvuku, co\u017e zlep\u0161uje celkovou kvalitu reklamy. V kombinaci tyto prvky vytv\u00e1\u0159ej\u00ed reklamn\u00ed obsah, kter\u00fd je atraktivn\u00ed, \u00fa\u010dinn\u011b komunikuje s c\u00edlovou skupinou a posiluje pov\u011bdom\u00ed o zna\u010dce \u010di produktu. Jsou kl\u00ed\u010dov\u00fdm n\u00e1strojem pro dosa\u017een\u00ed reklamn\u00edch c\u00edl\u016f a zaujet\u00ed publika ve vyt\u00ed\u017een\u00e9m prost\u0159ed\u00ed reklamn\u00edho trhu.\r\n\r"
                    }
                  </div>
                </h3>
              </div>
              <div
                data-plasmic-name={"right"}
                data-plasmic-override={overrides.right}
                className={classNames(projectcss.all, sty.right, {
                  [sty.righttab1]: hasVariant($state, "tab1", "tab1")
                })}
                style={(() => {
                  try {
                    return {
                      gap: "4vh"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__rg3TS, {
                    [sty.freeBoxtab1__rg3TSLce00]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateVideoPlayerIsSet"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "isSet"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerIsSet"] != null &&
                      typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                      typeof $steps["updateVideoPlayerIsSet"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerIsSet"] = await $steps[
                        "updateVideoPlayerIsSet"
                      ];
                    }
                  }}
                >
                  <VideoPlayer
                    data-plasmic-name={"videoPlayer"}
                    data-plasmic-override={overrides.videoPlayer}
                    className={classNames("__wab_instance", sty.videoPlayer, {
                      [sty.videoPlayertab1]: hasVariant($state, "tab1", "tab1")
                    })}
                    isSet={generateStateValueProp($state, [
                      "videoPlayer",
                      "isSet"
                    ])}
                    onIsSetChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "videoPlayer",
                        "isSet"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onVideoPathChange2={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "videoPlayer",
                        "videoPath"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    videoPath={generateStateValueProp($state, [
                      "videoPlayer",
                      "videoPath"
                    ])}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__wnvH3, {
                    [sty.freeBoxtab1__wnvH3Lce00]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    )
                  })}
                  style={(() => {
                    try {
                      return {
                        gap: "2vw"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ywY9M, {
                      [sty.imgtab1__ywY9MLce00]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = !$state.videoPlayer
                        .isSet
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/showreel_2017_2.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/framepost/images/pexelsComoyuli26347463Jpg.jpg",
                      fullWidth: 4241,
                      fullHeight: 2830,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__udpc2, {
                      [sty.imgtab1__udpc2Lce00]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = !$state.videoPlayer
                        .isSet
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Render_square.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/framepost/images/pexelsOlly864939KopieJpg.jpg",
                      fullWidth: 5900,
                      fullHeight: 3933,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__m1Hk9, {
                      [sty.imgtab1__m1Hk9Lce00]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = !$state.videoPlayer
                        .isSet
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Bageterie-Boulevard-Reklamni-spot.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/framepost/images/pexelsMaumascaro1154189Jpg.jpg",
                      fullWidth: 4880,
                      fullHeight: 2998,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__pKNt4, {
                      [sty.imgtab1__pKNt4Lce00]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = $state.videoPlayer
                        .isSet
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/framepost/images/pexelsAnhdanghihi20360852Jpg.jpg",
                      fullWidth: 3954,
                      fullHeight: 2666,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        ) : null}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__hiOfT, {
          [sty.freeBoxtab1__hiOfTLce00]: hasVariant($state, "tab1", "tab1"),
          [sty.freeBoxtab2__hiOfTWaLvA]: hasVariant($state, "tab2", "tab2"),
          [sty.freeBoxtab3__hiOfT1IaHx]: hasVariant($state, "tab3", "tab3")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateTabIndex"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["tabIndex"]
                  },
                  operation: 0,
                  value: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTabIndex"] != null &&
            typeof $steps["updateTabIndex"] === "object" &&
            typeof $steps["updateTabIndex"].then === "function"
          ) {
            $steps["updateTabIndex"] = await $steps["updateTabIndex"];
          }
        }}
        style={
          hasVariant($state, "tab3", "tab3")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab2", "tab2")
            ? (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab1", "tab1")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
      >
        <div
          data-plasmic-name={"titleWrap2"}
          data-plasmic-override={overrides.titleWrap2}
          className={classNames(projectcss.all, sty.titleWrap2, {
            [sty.titleWrap2tab1]: hasVariant($state, "tab1", "tab1"),
            [sty.titleWrap2tab2]: hasVariant($state, "tab2", "tab2"),
            [sty.titleWrap2tab3]: hasVariant($state, "tab3", "tab3")
          })}
        >
          <VideoMainThird
            data-plasmic-name={"videoMainThird2"}
            data-plasmic-override={overrides.videoMainThird2}
            className={classNames("__wab_instance", sty.videoMainThird2, {
              [sty.videoMainThird2tab1]: hasVariant($state, "tab1", "tab1")
            })}
            onPressedChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "videoMainThird2",
                "pressed"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            pressed={generateStateValueProp($state, [
              "videoMainThird2",
              "pressed"
            ])}
            value={"Vizu\u00e1ln\u00ed efekty"}
          />
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__gdmGu, {
          [sty.freeBoxtab1__gdmGuLce00]: hasVariant($state, "tab1", "tab1"),
          [sty.freeBoxtab2__gdmGuWaLvA]: hasVariant($state, "tab2", "tab2"),
          [sty.freeBoxtab3__gdmGu1IaHx]: hasVariant($state, "tab3", "tab3")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateTabIndex"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["tabIndex"]
                  },
                  operation: 0,
                  value: 3
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTabIndex"] != null &&
            typeof $steps["updateTabIndex"] === "object" &&
            typeof $steps["updateTabIndex"].then === "function"
          ) {
            $steps["updateTabIndex"] = await $steps["updateTabIndex"];
          }
        }}
        style={
          hasVariant($state, "tab3", "tab3")
            ? (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab2", "tab2")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "tab1", "tab1")
            ? (() => {
                try {
                  return {
                    width: "0%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return {
                    width: "100%",
                    minWidth: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
      >
        <div
          data-plasmic-name={"titleWrap3"}
          data-plasmic-override={overrides.titleWrap3}
          className={classNames(projectcss.all, sty.titleWrap3, {
            [sty.titleWrap3tab1]: hasVariant($state, "tab1", "tab1"),
            [sty.titleWrap3tab2]: hasVariant($state, "tab2", "tab2"),
            [sty.titleWrap3tab3]: hasVariant($state, "tab3", "tab3")
          })}
        >
          <VideoMainThird
            data-plasmic-name={"videoMainThird3"}
            data-plasmic-override={overrides.videoMainThird3}
            className={classNames("__wab_instance", sty.videoMainThird3)}
            onPressedChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "videoMainThird3",
                "pressed"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            pressed={generateStateValueProp($state, [
              "videoMainThird3",
              "pressed"
            ])}
            value={"3D vizualizace"}
          />
        </div>
      </div>
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml, {
          [sty.embedHtmltab1]: hasVariant($state, "tab1", "tab1"),
          [sty.embedHtmltab2]: hasVariant($state, "tab2", "tab2"),
          [sty.embedHtmltab3]: hasVariant($state, "tab3", "tab3")
        })}
        code={(() => {
          return (function () {
            if (window.__keyListenerAttached) {
              document.removeEventListener(
                "keyup",
                window.__keyListenerFunction
              );
            }
            window.__keyListenerFunction = function (event) {
              if (event.repeat) return;
              if (
                typeof $state === "undefined" ||
                typeof $state.tabIndex !== "number"
              )
                return;
              if (event.key === "Escape") {
                $state.tabIndex = 0;
                $state.videoPlayer.isSet = false;
                $state.tabContent = false;
                $state.videoMainThird.pressed = false;
                $state.videoMainThird2.pressed = false;
                $state.videoMainThird3.pressed = false;
              } else if ($state.tabIndex !== 0) {
                if (event.key === "ArrowLeft" && $state.tabIndex > 1) {
                  $state.tabIndex -= 1;
                } else if (event.key === "ArrowRight" && $state.tabIndex < 3) {
                  $state.tabIndex += 1;
                }
              }
              console.log("Current tabIndex:", $state.tabIndex);
            };
            document.addEventListener("keyup", window.__keyListenerFunction);
            window.__keyListenerAttached = true;
          })();
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "titleWrap",
    "videoMainThird",
    "timer",
    "overlay",
    "divider",
    "left",
    "h3",
    "right",
    "videoPlayer",
    "titleWrap2",
    "videoMainThird2",
    "titleWrap3",
    "videoMainThird3",
    "embedHtml"
  ],
  titleWrap: ["titleWrap", "videoMainThird"],
  videoMainThird: ["videoMainThird"],
  timer: ["timer"],
  overlay: ["overlay"],
  divider: ["divider", "left", "h3", "right", "videoPlayer"],
  left: ["left", "h3"],
  h3: ["h3"],
  right: ["right", "videoPlayer"],
  videoPlayer: ["videoPlayer"],
  titleWrap2: ["titleWrap2", "videoMainThird2"],
  videoMainThird2: ["videoMainThird2"],
  titleWrap3: ["titleWrap3", "videoMainThird3"],
  videoMainThird3: ["videoMainThird3"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  titleWrap: "div";
  videoMainThird: typeof VideoMainThird;
  timer: typeof Timer;
  overlay: "div";
  divider: "div";
  left: "div";
  h3: "h3";
  right: "div";
  videoPlayer: typeof VideoPlayer;
  titleWrap2: "div";
  videoMainThird2: typeof VideoMainThird;
  titleWrap3: "div";
  videoMainThird3: typeof VideoMainThird;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideoSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideoSection__VariantsArgs;
    args?: PlasmicVideoSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideoSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVideoSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVideoSection__ArgProps,
          internalVariantPropNames: PlasmicVideoSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVideoSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideoSection";
  } else {
    func.displayName = `PlasmicVideoSection.${nodeName}`;
  }
  return func;
}

export const PlasmicVideoSection = Object.assign(
  // Top-level PlasmicVideoSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titleWrap: makeNodeComponent("titleWrap"),
    videoMainThird: makeNodeComponent("videoMainThird"),
    timer: makeNodeComponent("timer"),
    overlay: makeNodeComponent("overlay"),
    divider: makeNodeComponent("divider"),
    left: makeNodeComponent("left"),
    h3: makeNodeComponent("h3"),
    right: makeNodeComponent("right"),
    videoPlayer: makeNodeComponent("videoPlayer"),
    titleWrap2: makeNodeComponent("titleWrap2"),
    videoMainThird2: makeNodeComponent("videoMainThird2"),
    titleWrap3: makeNodeComponent("titleWrap3"),
    videoMainThird3: makeNodeComponent("videoMainThird3"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicVideoSection
    internalVariantProps: PlasmicVideoSection__VariantProps,
    internalArgProps: PlasmicVideoSection__ArgProps
  }
);

export default PlasmicVideoSection;
/* prettier-ignore-end */
