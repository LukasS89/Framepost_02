// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: 43WKmQEBoirr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: byOQkj8LrTNy/component
import VideoSection from "../../VideoSection"; // plasmic-import: PCeP8ysIYFrO/component
import VideoMainThird from "../../VideoMainThird"; // plasmic-import: yXosNAhrnOsk/component
import VideoPlayer from "../../VideoPlayer"; // plasmic-import: dFkllSNxNO3E/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicVideo3.module.css"; // plasmic-import: 43WKmQEBoirr/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aFBfMg1qH2H-/icon

createPlasmicElementProxy;

export type PlasmicVideo3__VariantMembers = {};
export type PlasmicVideo3__VariantsArgs = {};
type VariantPropType = keyof PlasmicVideo3__VariantsArgs;
export const PlasmicVideo3__VariantProps = new Array<VariantPropType>();

export type PlasmicVideo3__ArgsType = {};
type ArgPropType = keyof PlasmicVideo3__ArgsType;
export const PlasmicVideo3__ArgProps = new Array<ArgPropType>();

export type PlasmicVideo3__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  videoSection?: Flex__<typeof VideoSection>;
  videoMainThird?: Flex__<typeof VideoMainThird>;
  videoPlayer?: Flex__<typeof VideoPlayer>;
  svg?: Flex__<"svg">;
  videoMainThird2?: Flex__<typeof VideoMainThird>;
  videoMainThird3?: Flex__<typeof VideoMainThird>;
};

export interface DefaultVideo3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVideo3__RenderFunc(props: {
  variants: PlasmicVideo3__VariantsArgs;
  args: PlasmicVideo3__ArgsType;
  overrides: PlasmicVideo3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageEntry",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pageView",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "h1Render",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "videoPlayer.videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
      },
      {
        path: "videoPlayer.isSet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoSection.tabIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "videoMainThird.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird2.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird3.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <section className={classNames(projectcss.all, sty.section__uqupA)}>
            <VideoSection
              data-plasmic-name={"videoSection"}
              data-plasmic-override={overrides.videoSection}
              className={classNames("__wab_instance", sty.videoSection)}
              onTabIndexChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "videoSection",
                  "tabIndex"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              tabIndex={generateStateValueProp($state, [
                "videoSection",
                "tabIndex"
              ])}
            />

            {false ? (
              <div className={classNames(projectcss.all, sty.freeBox___4Pnv9)}>
                <section
                  className={classNames(projectcss.all, sty.section___7URv4)}
                  style={(() => {
                    try {
                      return {
                        width: "100%",
                        flex: 1,
                        minWidth: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__rlqBg
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }

                      $steps["updatePageView"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageView"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageView"] != null &&
                        typeof $steps["updatePageView"] === "object" &&
                        typeof $steps["updatePageView"].then === "function"
                      ) {
                        $steps["updatePageView"] = await $steps[
                          "updatePageView"
                        ];
                      }

                      $steps["updateH1Render"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["h1Render"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateH1Render"] != null &&
                        typeof $steps["updateH1Render"] === "object" &&
                        typeof $steps["updateH1Render"].then === "function"
                      ) {
                        $steps["updateH1Render"] = await $steps[
                          "updateH1Render"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird"}
                      data-plasmic-override={overrides.videoMainThird}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  </PlasmicLink__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f4Cw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wV3Q)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__dSzYz)}
                    >
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nsYct
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVideoPlayerIsSet"] = !$state
                              .videoPlayer.isSet
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["videoPlayer", "isSet"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVideoPlayerIsSet"] != null &&
                              typeof $steps["updateVideoPlayerIsSet"] ===
                                "object" &&
                              typeof $steps["updateVideoPlayerIsSet"].then ===
                                "function"
                            ) {
                              $steps["updateVideoPlayerIsSet"] = await $steps[
                                "updateVideoPlayerIsSet"
                              ];
                            }
                          }}
                        >
                          <VideoPlayer
                            data-plasmic-name={"videoPlayer"}
                            data-plasmic-override={overrides.videoPlayer}
                            className={classNames(
                              "__wab_instance",
                              sty.videoPlayer
                            )}
                            isSet={generateStateValueProp($state, [
                              "videoPlayer",
                              "isSet"
                            ])}
                            onIsSetChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "videoPlayer",
                                "isSet"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onVideoPathChange2={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "videoPlayer",
                                "videoPath"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            videoPath={generateStateValueProp($state, [
                              "videoPlayer",
                              "videoPath"
                            ])}
                          />
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___02Ztp
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___3VLu3)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20%"}
                          loading={"lazy"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVideoPlayerIsSet"] =
                              $state.videoPlayer.isSet === false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["videoPlayer", "isSet"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateVideoPlayerIsSet"] != null &&
                              typeof $steps["updateVideoPlayerIsSet"] ===
                                "object" &&
                              typeof $steps["updateVideoPlayerIsSet"].then ===
                                "function"
                            ) {
                              $steps["updateVideoPlayerIsSet"] = await $steps[
                                "updateVideoPlayerIsSet"
                              ];
                            }

                            $steps["updateVideoPlayerVideoPath"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["videoPlayer", "videoPath"]
                                    },
                                    operation: 0,
                                    value:
                                      "https://frame.animujto.cz/wp-content/uploads/2024/03/showreel_2017_2.mp4"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVideoPlayerVideoPath"] != null &&
                              typeof $steps["updateVideoPlayerVideoPath"] ===
                                "object" &&
                              typeof $steps["updateVideoPlayerVideoPath"]
                                .then === "function"
                            ) {
                              $steps["updateVideoPlayerVideoPath"] =
                                await $steps["updateVideoPlayerVideoPath"];
                            }
                          }}
                          src={{
                            src: "/plasmic/framepost/images/pexelsComoyuli26347463Jpg.jpg",
                            fullWidth: 4241,
                            fullHeight: 2830,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__sesla)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20%"}
                          loading={"lazy"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVideoPlayerIsSet"] =
                              $state.videoPlayer.isSet === false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["videoPlayer", "isSet"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateVideoPlayerIsSet"] != null &&
                              typeof $steps["updateVideoPlayerIsSet"] ===
                                "object" &&
                              typeof $steps["updateVideoPlayerIsSet"].then ===
                                "function"
                            ) {
                              $steps["updateVideoPlayerIsSet"] = await $steps[
                                "updateVideoPlayerIsSet"
                              ];
                            }

                            $steps["updateVideoPlayerVideoPath"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["videoPlayer", "videoPath"]
                                    },
                                    operation: 0,
                                    value:
                                      "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVideoPlayerVideoPath"] != null &&
                              typeof $steps["updateVideoPlayerVideoPath"] ===
                                "object" &&
                              typeof $steps["updateVideoPlayerVideoPath"]
                                .then === "function"
                            ) {
                              $steps["updateVideoPlayerVideoPath"] =
                                await $steps["updateVideoPlayerVideoPath"];
                            }
                          }}
                          src={{
                            src: "/plasmic/framepost/images/pexelsComoyuli26347463Jpg.jpg",
                            fullWidth: 4241,
                            fullHeight: 2830,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n5Vf5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iiOfK
                        )}
                      >
                        <CheckSvgIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__yz5H)}
                  style={(() => {
                    try {
                      return {
                        width: "100%",
                        flex: 1,
                        minWidth: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___7RbOz
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }

                      $steps["updatePageView"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageView"]
                              },
                              operation: 0,
                              value: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageView"] != null &&
                        typeof $steps["updatePageView"] === "object" &&
                        typeof $steps["updatePageView"].then === "function"
                      ) {
                        $steps["updatePageView"] = await $steps[
                          "updatePageView"
                        ];
                      }

                      $steps["updateH1Render"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["h1Render"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateH1Render"] != null &&
                        typeof $steps["updateH1Render"] === "object" &&
                        typeof $steps["updateH1Render"].then === "function"
                      ) {
                        $steps["updateH1Render"] = await $steps[
                          "updateH1Render"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird2"}
                      data-plasmic-override={overrides.videoMainThird2}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird2
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird2",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird2",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  </PlasmicLink__>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__tIPp9)}
                  style={(() => {
                    try {
                      return {
                        width: "100%",
                        flex: 1,
                        minWidth: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qstvF
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateVideoPlayerIsSet"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "isSet"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerIsSet"] != null &&
                        typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                        typeof $steps["updateVideoPlayerIsSet"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerIsSet"] = await $steps[
                          "updateVideoPlayerIsSet"
                        ];
                      }

                      $steps["updateVideoPlayerVideoPath"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["videoPlayer", "videoPath"]
                              },
                              operation: 0,
                              value:
                                "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVideoPlayerVideoPath"] != null &&
                        typeof $steps["updateVideoPlayerVideoPath"] ===
                          "object" &&
                        typeof $steps["updateVideoPlayerVideoPath"].then ===
                          "function"
                      ) {
                        $steps["updateVideoPlayerVideoPath"] = await $steps[
                          "updateVideoPlayerVideoPath"
                        ];
                      }

                      $steps["updatePageView"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageView"]
                              },
                              operation: 0,
                              value: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageView"] != null &&
                        typeof $steps["updatePageView"] === "object" &&
                        typeof $steps["updatePageView"].then === "function"
                      ) {
                        $steps["updatePageView"] = await $steps[
                          "updatePageView"
                        ];
                      }

                      $steps["updateH1Render"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["h1Render"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateH1Render"] != null &&
                        typeof $steps["updateH1Render"] === "object" &&
                        typeof $steps["updateH1Render"].then === "function"
                      ) {
                        $steps["updateH1Render"] = await $steps[
                          "updateH1Render"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird3"}
                      data-plasmic-override={overrides.videoMainThird3}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird3
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird3",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird3",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  </PlasmicLink__>
                </section>
                {false ? (
                  <Timer
                    className={classNames("__wab_instance", sty.timer__sLgNq)}
                    intervalSeconds={0.05}
                    isRunning={$state.pageEntry === false ? true : false}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updatePageEntry"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageEntry"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageEntry"] != null &&
                        typeof $steps["updatePageEntry"] === "object" &&
                        typeof $steps["updatePageEntry"].then === "function"
                      ) {
                        $steps["updatePageEntry"] = await $steps[
                          "updatePageEntry"
                        ];
                      }
                    }}
                    runWhileEditing={false}
                  />
                ) : null}
                {false ? (
                  <Timer
                    className={classNames("__wab_instance", sty.timer__rGk2D)}
                    intervalSeconds={0.4}
                    isRunning={$state.h1Render === 1}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updateH1Render"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["h1Render"]
                              },
                              operation: 0,
                              value: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateH1Render"] != null &&
                        typeof $steps["updateH1Render"] === "object" &&
                        typeof $steps["updateH1Render"].then === "function"
                      ) {
                        $steps["updateH1Render"] = await $steps[
                          "updateH1Render"
                        ];
                      }
                    }}
                    runWhileEditing={false}
                  />
                ) : null}
              </div>
            ) : null}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "videoSection",
    "videoMainThird",
    "videoPlayer",
    "svg",
    "videoMainThird2",
    "videoMainThird3"
  ],
  header: ["header"],
  videoSection: ["videoSection"],
  videoMainThird: ["videoMainThird"],
  videoPlayer: ["videoPlayer"],
  svg: ["svg"],
  videoMainThird2: ["videoMainThird2"],
  videoMainThird3: ["videoMainThird3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  videoSection: typeof VideoSection;
  videoMainThird: typeof VideoMainThird;
  videoPlayer: typeof VideoPlayer;
  svg: "svg";
  videoMainThird2: typeof VideoMainThird;
  videoMainThird3: typeof VideoMainThird;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideo3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideo3__VariantsArgs;
    args?: PlasmicVideo3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideo3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVideo3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVideo3__ArgProps,
          internalVariantPropNames: PlasmicVideo3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVideo3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideo3";
  } else {
    func.displayName = `PlasmicVideo3.${nodeName}`;
  }
  return func;
}

export const PlasmicVideo3 = Object.assign(
  // Top-level PlasmicVideo3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    videoSection: makeNodeComponent("videoSection"),
    videoMainThird: makeNodeComponent("videoMainThird"),
    videoPlayer: makeNodeComponent("videoPlayer"),
    svg: makeNodeComponent("svg"),
    videoMainThird2: makeNodeComponent("videoMainThird2"),
    videoMainThird3: makeNodeComponent("videoMainThird3"),

    // Metadata about props expected for PlasmicVideo3
    internalVariantProps: PlasmicVideo3__VariantProps,
    internalArgProps: PlasmicVideo3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicVideo3;
/* prettier-ignore-end */
