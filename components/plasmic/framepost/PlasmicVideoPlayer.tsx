// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: dFkllSNxNO3E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicVideoPlayer.module.css"; // plasmic-import: dFkllSNxNO3E/css

createPlasmicElementProxy;

export type PlasmicVideoPlayer__VariantMembers = {};
export type PlasmicVideoPlayer__VariantsArgs = {};
type VariantPropType = keyof PlasmicVideoPlayer__VariantsArgs;
export const PlasmicVideoPlayer__VariantProps = new Array<VariantPropType>();

export type PlasmicVideoPlayer__ArgsType = {
  videoPath?: string;
  onVideoPathChange2?: (val: string) => void;
  isSet?: boolean;
  onIsSetChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicVideoPlayer__ArgsType;
export const PlasmicVideoPlayer__ArgProps = new Array<ArgPropType>(
  "videoPath",
  "onVideoPathChange2",
  "isSet",
  "onIsSetChange"
);

export type PlasmicVideoPlayer__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultVideoPlayerProps {
  videoPath?: string;
  onVideoPathChange2?: (val: string) => void;
  isSet?: boolean;
  onIsSetChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVideoPlayer__RenderFunc(props: {
  variants: PlasmicVideoPlayer__VariantsArgs;
  args: PlasmicVideoPlayer__ArgsType;
  overrides: PlasmicVideoPlayer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "videoPath",
        type: "writable",
        variableType: "text",

        valueProp: "videoPath",
        onChangeProp: "onVideoPathChange2"
      },
      {
        path: "isSet",
        type: "writable",
        variableType: "boolean",

        valueProp: "isSet",
        onChangeProp: "onIsSetChange"
      },
      {
        path: "start",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={(() => {
          const videoUrl = $props.videoPath;
          const isSet = $state.isSet;
          const videoPlayer = `
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  
  <style>
    .material-symbols-outlined {
      font-variation-settings:
        'FILL' 0,
        'wght' 400,
        'GRAD' 0,
        'opsz' 24;
    }
    .video-container {
      background-color: black; /* Ensures black background always visible */
      width: 100%;
      
      position: relative;
      overflow: hidden;
    }
    #customVideo {
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
      width: 100%;
      min-height: 300px; /* Prevents shrinkage */
      aspect-ratio: 16 / 9; /* Keeps consistent aspect ratio */
      display: block;
    }
  </style>

  <div class="video-container">
    <video id="customVideo" tabindex="0"></video>
    
    <input type="range" id="seekBar" value="0" 
      style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); width: 90%; opacity: 0.8; transition: opacity 0.3s; background: white; height: 5px; border-radius: 5px; appearance: none; cursor: pointer;" />

    <!-- Mute Button -->
    <span id="muteButton" class="material-symbols-outlined" 
      style="position: absolute; top: 10px; right: 10px; font-size: 30px; cursor: pointer; background: rgba(0, 0, 0, 0.5); color: white; padding: 5px; border-radius: 50%;">
      volume_mute
    </span>
  </div>
  
  <script>
    (function() {
      const video = document.getElementById("customVideo");
      const seekBar = document.getElementById("seekBar");
      const muteButton = document.getElementById("muteButton");

      let lastClickTime = 0; // Track last click time

      console.log("Video element initialized:", video);

      function loadVideo(newSrc) {
        if (!newSrc) return;
        console.log("Loading new video:", newSrc);

        video.style.opacity = "0"; // Fade out before loading
        seekBar.value = 0; // Reset seek bar to start to prevent jumping
        video.src = newSrc;
        video.load();

        video.addEventListener("loadeddata", () => {
          console.log("New video loaded.");
          video.style.opacity = "1"; // Fade in smoothly
          seekBar.value = 0; // Ensure the seek bar stays at 0

          if (${isSet}) {
            video.play().catch(error => console.error("Auto-play blocked:", error));
          } else {
            video.pause();
            video.currentTime = 0;
          }
        }, { once: true }); // Ensure it runs only once per load
      }

      // Load initial video
      loadVideo("${videoUrl}");

      // Update seek bar as video plays
      video.addEventListener("timeupdate", () => {
        if (video.duration) {
          seekBar.value = (video.currentTime / video.duration) * 100;
        }
      });

      // Pause video when the user interacts with the seek bar
      seekBar.addEventListener("input", (event) => {
        video.pause(); // Pause when user drags the seek bar
        console.log("Video paused due to seek bar interaction.");
        const seekTo = (event.target.value / 100) * video.duration;
        video.currentTime = seekTo;
      });

      // Show seek bar on hover
      video.addEventListener("mouseenter", () => {
        seekBar.style.opacity = "1";
      });

      video.addEventListener("mouseleave", () => {
        seekBar.style.opacity = "0.8";
      });

      // Play/pause with debouncing
      video.addEventListener("pointerdown", async (event) => {
        if (!${isSet}) return; // Stopper: Prevent any play if isSet is false

        const now = Date.now();
        if (now - lastClickTime < 300) return; // Ignore duplicate clicks within 300ms
        lastClickTime = now;

        console.log("Video clicked at:", now);

        try {
          video.focus();
          if (video.paused) {
            await video.play();
            console.log("Video playing...");
          } else {
            video.pause();
            console.log("Video paused...");
          }
        } catch (error) {
          console.error("Playback failed:", error);
        }
      });

      video.addEventListener("focus", () => console.log("Video focused"));

      // Mute/Unmute Functionality
      muteButton.addEventListener("click", () => {
        video.muted = !video.muted; // Toggle mute
        muteButton.textContent = video.muted ? "volume_off" : "volume_mute"; // Update icon
        console.log("Mute toggled:", video.muted);
      });

      // Listen for changes to $props.videoPath and reload the video smoothly
      const observer = new MutationObserver(() => {
        const newVideoUrl = "${videoUrl}";
        if (newVideoUrl !== video.src) {
          loadVideo(newVideoUrl);
        }
      });

      observer.observe(document.body, { childList: true, subtree: true });
      
    })();
  </script>
`;
          return videoPlayer;
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideoPlayer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideoPlayer__VariantsArgs;
    args?: PlasmicVideoPlayer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideoPlayer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVideoPlayer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVideoPlayer__ArgProps,
          internalVariantPropNames: PlasmicVideoPlayer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVideoPlayer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideoPlayer";
  } else {
    func.displayName = `PlasmicVideoPlayer.${nodeName}`;
  }
  return func;
}

export const PlasmicVideoPlayer = Object.assign(
  // Top-level PlasmicVideoPlayer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicVideoPlayer
    internalVariantProps: PlasmicVideoPlayer__VariantProps,
    internalArgProps: PlasmicVideoPlayer__ArgProps
  }
);

export default PlasmicVideoPlayer;
/* prettier-ignore-end */
