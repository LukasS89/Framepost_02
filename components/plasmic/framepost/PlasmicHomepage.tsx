// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: WR9EKUzj2RNe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: byOQkj8LrTNy/component
import MenuSection from "../../MenuSection"; // plasmic-import: HdUW4xecE0oZ/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: WR9EKUzj2RNe/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  entry: "entry";
};
export type PlasmicHomepage__VariantsArgs = {
  entry?: SingleBooleanChoiceArg<"entry">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "entry"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  main?: Flex__<"main">;
  overlaySection?: Flex__<"section">;
  comingSoonContainer?: Flex__<typeof Embed>;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageEntry",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "entry",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pageEntry === false ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.entry
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.rootentry]: hasVariant($state, "entry", "entry") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainentry]: hasVariant($state, "entry", "entry")
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___0Mn8D, {
                [sty.freeBoxentry___0Mn8DLv6DW]: hasVariant(
                  $state,
                  "entry",
                  "entry"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__lCpVm)}>
                <MenuSection
                  className={classNames(
                    "__wab_instance",
                    sty.menuSection___01KdY
                  )}
                  image={
                    "https://frame.animujto.cz/wp-content/uploads/2024/03/website_page-scaled-e1709644777375.jpg"
                  }
                  title={"Digit\u00e1ln\u00ed slu\u017eby"}
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___0Ui63)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToVideo3"] = true
                    ? (() => {
                        const actionArgs = { destination: `/video-3` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToVideo3"] != null &&
                    typeof $steps["goToVideo3"] === "object" &&
                    typeof $steps["goToVideo3"].then === "function"
                  ) {
                    $steps["goToVideo3"] = await $steps["goToVideo3"];
                  }
                }}
              >
                <MenuSection
                  className={classNames(
                    "__wab_instance",
                    sty.menuSection__va7Ir
                  )}
                  title={"Reklamn\u00ed videa"}
                  video={
                    "https://frame.animujto.cz/wp-content/uploads/2024/03/Spin_SQ_square_v04.mp4"
                  }
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vTii)}>
              <div className={classNames(projectcss.all, sty.freeBox__rwEds)}>
                <MenuSection
                  className={classNames(
                    "__wab_instance",
                    sty.menuSection__fcM2G
                  )}
                  title={"Filmov\u00e1 postprodukce"}
                  video={
                    "https://frame.animujto.cz/wp-content/uploads/2024/03/Render_square.mp4"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qo8Wm)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___0D3Xr)}
                  style={(() => {
                    try {
                      return {
                        gap: "1vh"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__bLu3D
                    )}
                  >
                    {"lukas@framepost.net"}
                  </h1>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__hxY7V
                    )}
                  >
                    {"+420 734 599 111"}
                  </h1>
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"overlaySection"}
              data-plasmic-override={overrides.overlaySection}
              className={classNames(projectcss.all, sty.overlaySection)}
              style={(() => {
                try {
                  return {
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    position: "absolute", // Position it relative to the viewport
                    top: "50%", // Center vertically
                    left: "50%", // Center horizontally
                    transform: "translate(-50%, -50%)", // Adjust for the element's own dimensions
                    height: "auto", // Keep height auto to hug content
                    width: "auto" // Keep width auto to hug content
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <Embed
                data-plasmic-name={"comingSoonContainer"}
                data-plasmic-override={overrides.comingSoonContainer}
                className={classNames(
                  "__wab_instance",
                  sty.comingSoonContainer
                )}
                code={
                  '<style>\r\n  .coming-soon-container {\r\n    position: relative;\r\n    border-left: 10px solid white;\r\n    border-top: 10px solid white;\r\n    padding-top: 2vh;\r\n    padding-bottom: 2.62vh;\r\n    padding-left: 4vh; /* Double the left padding */\r\n    padding-right: 4vh; /* Double the right padding */\r\n    font-size: 8vh;\r\n    color: white;\r\n    text-align: center;\r\n    width: fit-content; /* Hug content */\r\n  }\r\n\r\n  .coming-soon-container::after {\r\n    content: "";\r\n    position: absolute;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    width: 0;\r\n    border-bottom: 10px solid white;\r\n    animation: animateWidth 4s cubic-bezier(0.42, 0, 0.58, 1) forwards;\r\n  }\r\n\r\n  .coming-soon-container::before {\r\n    content: "";\r\n    position: absolute;\r\n    top: -10px;\r\n    right: -10px;\r\n    height: 0;\r\n    border-left: 10px solid white;\r\n    animation: animateHeight 4s cubic-bezier(0.42, 0, 0.58, 1) forwards;\r\n  }\r\n\r\n  @keyframes animateWidth {\r\n    from {\r\n      width: 77%;\r\n    }\r\n    to {\r\n      width: calc(87%);\r\n    }\r\n  }\r\n\r\n  @keyframes animateHeight {\r\n    from {\r\n      height: 72%;\r\n    }\r\n    to {\r\n      height: calc(72%);\r\n    }\r\n  }\r\n\r\n  .coming-soon-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n</style>\r\n\r\n<div class="coming-soon-wrapper">\r\n  <div class="coming-soon-container">Coming Soon</div>\r\n</div>\r\n'
                }
              />
            </section>
            <Timer
              data-plasmic-name={"timer"}
              data-plasmic-override={overrides.timer}
              className={classNames("__wab_instance", sty.timer, {
                [sty.timerentry]: hasVariant($state, "entry", "entry")
              })}
              intervalSeconds={0.05}
              isRunning={(() => {
                try {
                  return $state.pageEntry === false ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              onTick={async () => {
                const $steps = {};

                $steps["updatePageEntry"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["pageEntry"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePageEntry"] != null &&
                  typeof $steps["updatePageEntry"] === "object" &&
                  typeof $steps["updatePageEntry"].then === "function"
                ) {
                  $steps["updatePageEntry"] = await $steps["updatePageEntry"];
                }
              }}
              runWhileEditing={false}
            />
          </main>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "main",
    "overlaySection",
    "comingSoonContainer",
    "timer"
  ],
  header: ["header"],
  main: ["main", "overlaySection", "comingSoonContainer", "timer"],
  overlaySection: ["overlaySection", "comingSoonContainer"],
  comingSoonContainer: ["comingSoonContainer"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  main: "main";
  overlaySection: "section";
  comingSoonContainer: typeof Embed;
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    overlaySection: makeNodeComponent("overlaySection"),
    comingSoonContainer: makeNodeComponent("comingSoonContainer"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
