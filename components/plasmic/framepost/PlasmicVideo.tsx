// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: pR1X-CTa8OtP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: byOQkj8LrTNy/component
import VideoMainThird from "../../VideoMainThird"; // plasmic-import: yXosNAhrnOsk/component
import VideoPlayer from "../../VideoPlayer"; // plasmic-import: dFkllSNxNO3E/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicVideo.module.css"; // plasmic-import: pR1X-CTa8OtP/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aFBfMg1qH2H-/icon

createPlasmicElementProxy;

export type PlasmicVideo__VariantMembers = {
  entry: "entry";
  tab1: "tab1";
};
export type PlasmicVideo__VariantsArgs = {
  entry?: SingleBooleanChoiceArg<"entry">;
  tab1?: SingleBooleanChoiceArg<"tab1">;
};
type VariantPropType = keyof PlasmicVideo__VariantsArgs;
export const PlasmicVideo__VariantProps = new Array<VariantPropType>(
  "entry",
  "tab1"
);

export type PlasmicVideo__ArgsType = {};
type ArgPropType = keyof PlasmicVideo__ArgsType;
export const PlasmicVideo__ArgProps = new Array<ArgPropType>();

export type PlasmicVideo__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  videoMainThird?: Flex__<typeof VideoMainThird>;
  videoPlayer?: Flex__<typeof VideoPlayer>;
  svg?: Flex__<"svg">;
  videoMainThird2?: Flex__<typeof VideoMainThird>;
  videoMainThird3?: Flex__<typeof VideoMainThird>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultVideoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVideo__RenderFunc(props: {
  variants: PlasmicVideo__VariantsArgs;
  args: PlasmicVideo__ArgsType;
  overrides: PlasmicVideo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "entry",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !$state.pageEntry;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.entry
      },
      {
        path: "pageEntry",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pageView",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tab1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pageView === 1 ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.tab1
      },
      {
        path: "h1Render",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "videoPlayer.videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
      },
      {
        path: "videoPlayer.isSet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird2.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoMainThird3.pressed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootentry]: hasVariant($state, "entry", "entry"),
              [sty.roottab1]: hasVariant($state, "tab1", "tab1"),
              [sty.roottab1_entry]:
                hasVariant($state, "tab1", "tab1") &&
                hasVariant($state, "entry", "entry")
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.headertab1]: hasVariant($state, "tab1", "tab1")
            })}
          />

          <section
            className={classNames(projectcss.all, sty.section__pGkWz, {
              [sty.sectionentry__pGkWzY9P8G]: hasVariant(
                $state,
                "entry",
                "entry"
              ),
              [sty.sectiontab1__pGkWzO4BHi]: hasVariant($state, "tab1", "tab1")
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__istj2, {
                [sty.freeBoxentry__istj2Y9P8G]: hasVariant(
                  $state,
                  "entry",
                  "entry"
                ),
                [sty.freeBoxtab1__istj2O4BHi]: hasVariant(
                  $state,
                  "tab1",
                  "tab1"
                )
              })}
            >
              <section
                className={classNames(projectcss.all, sty.section___0FWdy, {
                  [sty.sectionentry___0FWdyY9P8G]: hasVariant(
                    $state,
                    "entry",
                    "entry"
                  ),
                  [sty.sectiontab1___0FWdyO4BHi]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__cvanE,
                    {
                      [sty.linktab1__cvanEo4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    }
                  )}
                  component={Link}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateVideoPlayerIsSet"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "isSet"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerIsSet"] != null &&
                      typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                      typeof $steps["updateVideoPlayerIsSet"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerIsSet"] = await $steps[
                        "updateVideoPlayerIsSet"
                      ];
                    }

                    $steps["updateVideoPlayerVideoPath"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "videoPath"]
                            },
                            operation: 0,
                            value:
                              "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerVideoPath"] != null &&
                      typeof $steps["updateVideoPlayerVideoPath"] ===
                        "object" &&
                      typeof $steps["updateVideoPlayerVideoPath"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerVideoPath"] = await $steps[
                        "updateVideoPlayerVideoPath"
                      ];
                    }

                    $steps["updatePageView"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageView"]
                            },
                            operation: 0,
                            value: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageView"] != null &&
                      typeof $steps["updatePageView"] === "object" &&
                      typeof $steps["updatePageView"].then === "function"
                    ) {
                      $steps["updatePageView"] = await $steps["updatePageView"];
                    }

                    $steps["updateH1Render"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["h1Render"]
                            },
                            operation: 0,
                            value: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateH1Render"] != null &&
                      typeof $steps["updateH1Render"] === "object" &&
                      typeof $steps["updateH1Render"].then === "function"
                    ) {
                      $steps["updateH1Render"] = await $steps["updateH1Render"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {(
                    hasVariant($state, "tab1", "tab1")
                      ? (() => {
                          try {
                            return $state.h1Render === 2 ? false : true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird"}
                      data-plasmic-override={overrides.videoMainThird}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird,
                        {
                          [sty.videoMainThirdtab1]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  ) : null}
                </PlasmicLink__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__bGsAf, {
                    [sty.freeBoxtab1__bGsAfo4BHi]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    ),
                    [sty.freeBoxtab1_entry__bGsAfo4BHiY9P8G]:
                      hasVariant($state, "tab1", "tab1") &&
                      hasVariant($state, "entry", "entry")
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zKqKa, {
                      [sty.freeBoxtab1__zKqKaO4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__l2Xu, {
                      [sty.freeBoxtab1__l2XuO4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                  >
                    {(hasVariant($state, "tab1", "tab1") ? true : false) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ys1Eb,
                          {
                            [sty.freeBoxtab1__ys1Ebo4BHi]: hasVariant(
                              $state,
                              "tab1",
                              "tab1"
                            )
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVideoPlayerIsSet"] = !$state.videoPlayer
                            .isSet
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["videoPlayer", "isSet"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVideoPlayerIsSet"] != null &&
                            typeof $steps["updateVideoPlayerIsSet"] ===
                              "object" &&
                            typeof $steps["updateVideoPlayerIsSet"].then ===
                              "function"
                          ) {
                            $steps["updateVideoPlayerIsSet"] = await $steps[
                              "updateVideoPlayerIsSet"
                            ];
                          }
                        }}
                      >
                        <VideoPlayer
                          data-plasmic-name={"videoPlayer"}
                          data-plasmic-override={overrides.videoPlayer}
                          className={classNames(
                            "__wab_instance",
                            sty.videoPlayer,
                            {
                              [sty.videoPlayertab1]: hasVariant(
                                $state,
                                "tab1",
                                "tab1"
                              )
                            }
                          )}
                          isSet={generateStateValueProp($state, [
                            "videoPlayer",
                            "isSet"
                          ])}
                          onIsSetChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "videoPlayer",
                              "isSet"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onVideoPathChange2={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "videoPlayer",
                              "videoPath"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          videoPath={generateStateValueProp($state, [
                            "videoPlayer",
                            "videoPath"
                          ])}
                        />
                      </div>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__mewri,
                        {
                          [sty.freeBoxtab1__mewriO4BHi]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__oq9R2, {
                          [sty.imgtab1__oq9R2O4BHi]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20%"}
                        loading={"lazy"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVideoPlayerIsSet"] =
                            $state.videoPlayer.isSet === false
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["videoPlayer", "isSet"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateVideoPlayerIsSet"] != null &&
                            typeof $steps["updateVideoPlayerIsSet"] ===
                              "object" &&
                            typeof $steps["updateVideoPlayerIsSet"].then ===
                              "function"
                          ) {
                            $steps["updateVideoPlayerIsSet"] = await $steps[
                              "updateVideoPlayerIsSet"
                            ];
                          }

                          $steps["updateVideoPlayerVideoPath"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["videoPlayer", "videoPath"]
                                  },
                                  operation: 0,
                                  value:
                                    "https://frame.animujto.cz/wp-content/uploads/2024/03/showreel_2017_2.mp4"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVideoPlayerVideoPath"] != null &&
                            typeof $steps["updateVideoPlayerVideoPath"] ===
                              "object" &&
                            typeof $steps["updateVideoPlayerVideoPath"].then ===
                              "function"
                          ) {
                            $steps["updateVideoPlayerVideoPath"] = await $steps[
                              "updateVideoPlayerVideoPath"
                            ];
                          }
                        }}
                        src={{
                          src: "/plasmic/framepost/images/pexelsComoyuli26347463Jpg.jpg",
                          fullWidth: 4241,
                          fullHeight: 2830,
                          aspectRatio: undefined
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__pksmU, {
                          [sty.imgtab1__pksmUo4BHi]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20%"}
                        loading={"lazy"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVideoPlayerIsSet"] =
                            $state.videoPlayer.isSet === false
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["videoPlayer", "isSet"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateVideoPlayerIsSet"] != null &&
                            typeof $steps["updateVideoPlayerIsSet"] ===
                              "object" &&
                            typeof $steps["updateVideoPlayerIsSet"].then ===
                              "function"
                          ) {
                            $steps["updateVideoPlayerIsSet"] = await $steps[
                              "updateVideoPlayerIsSet"
                            ];
                          }

                          $steps["updateVideoPlayerVideoPath"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["videoPlayer", "videoPath"]
                                  },
                                  operation: 0,
                                  value:
                                    "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVideoPlayerVideoPath"] != null &&
                            typeof $steps["updateVideoPlayerVideoPath"] ===
                              "object" &&
                            typeof $steps["updateVideoPlayerVideoPath"].then ===
                              "function"
                          ) {
                            $steps["updateVideoPlayerVideoPath"] = await $steps[
                              "updateVideoPlayerVideoPath"
                            ];
                          }
                        }}
                        src={{
                          src: "/plasmic/framepost/images/pexelsComoyuli26347463Jpg.jpg",
                          fullWidth: 4241,
                          fullHeight: 2830,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Fasf, {
                      [sty.freeBoxtab1___0FasfO4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__z0NgG,
                        {
                          [sty.freeBoxtab1__z0NgGo4BHi]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                    >
                      <CheckSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgtab1]: hasVariant($state, "tab1", "tab1")
                        })}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__nAYx, {
                  [sty.sectiontab1__nAYxO4BHi]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__neWj6,
                    {
                      [sty.linktab1__neWj6O4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    }
                  )}
                  component={Link}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateVideoPlayerIsSet"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "isSet"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerIsSet"] != null &&
                      typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                      typeof $steps["updateVideoPlayerIsSet"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerIsSet"] = await $steps[
                        "updateVideoPlayerIsSet"
                      ];
                    }

                    $steps["updateVideoPlayerVideoPath"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "videoPath"]
                            },
                            operation: 0,
                            value:
                              "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerVideoPath"] != null &&
                      typeof $steps["updateVideoPlayerVideoPath"] ===
                        "object" &&
                      typeof $steps["updateVideoPlayerVideoPath"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerVideoPath"] = await $steps[
                        "updateVideoPlayerVideoPath"
                      ];
                    }

                    $steps["updatePageView"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageView"]
                            },
                            operation: 0,
                            value: 2
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageView"] != null &&
                      typeof $steps["updatePageView"] === "object" &&
                      typeof $steps["updatePageView"].then === "function"
                    ) {
                      $steps["updatePageView"] = await $steps["updatePageView"];
                    }

                    $steps["updateH1Render"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["h1Render"]
                            },
                            operation: 0,
                            value: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateH1Render"] != null &&
                      typeof $steps["updateH1Render"] === "object" &&
                      typeof $steps["updateH1Render"].then === "function"
                    ) {
                      $steps["updateH1Render"] = await $steps["updateH1Render"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {(
                    hasVariant($state, "tab1", "tab1")
                      ? (() => {
                          try {
                            return $state.h1Render === 2 ? false : true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird2"}
                      data-plasmic-override={overrides.videoMainThird2}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird2,
                        {
                          [sty.videoMainThird2tab1]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird2",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird2",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  ) : null}
                </PlasmicLink__>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__mkL, {
                  [sty.sectionentry__mkLy9P8G]: hasVariant(
                    $state,
                    "entry",
                    "entry"
                  ),
                  [sty.sectiontab1__mkLo4BHi]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__vz6Zy,
                    {
                      [sty.linktab1__vz6ZyO4BHi]: hasVariant(
                        $state,
                        "tab1",
                        "tab1"
                      )
                    }
                  )}
                  component={Link}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateVideoPlayerIsSet"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "isSet"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerIsSet"] != null &&
                      typeof $steps["updateVideoPlayerIsSet"] === "object" &&
                      typeof $steps["updateVideoPlayerIsSet"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerIsSet"] = await $steps[
                        "updateVideoPlayerIsSet"
                      ];
                    }

                    $steps["updateVideoPlayerVideoPath"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["videoPlayer", "videoPath"]
                            },
                            operation: 0,
                            value:
                              "https://frame.animujto.cz/wp-content/uploads/2024/03/Vyjimecne-Vanoce-delate-vy.-I-ZOOT.cz-I-Vydejny-radosti.mp4"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVideoPlayerVideoPath"] != null &&
                      typeof $steps["updateVideoPlayerVideoPath"] ===
                        "object" &&
                      typeof $steps["updateVideoPlayerVideoPath"].then ===
                        "function"
                    ) {
                      $steps["updateVideoPlayerVideoPath"] = await $steps[
                        "updateVideoPlayerVideoPath"
                      ];
                    }

                    $steps["updatePageView"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageView"]
                            },
                            operation: 0,
                            value: 3
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageView"] != null &&
                      typeof $steps["updatePageView"] === "object" &&
                      typeof $steps["updatePageView"].then === "function"
                    ) {
                      $steps["updatePageView"] = await $steps["updatePageView"];
                    }

                    $steps["updateH1Render"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["h1Render"]
                            },
                            operation: 0,
                            value: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateH1Render"] != null &&
                      typeof $steps["updateH1Render"] === "object" &&
                      typeof $steps["updateH1Render"].then === "function"
                    ) {
                      $steps["updateH1Render"] = await $steps["updateH1Render"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {(
                    hasVariant($state, "tab1", "tab1")
                      ? (() => {
                          try {
                            return $state.h1Render === 2 ? false : true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <VideoMainThird
                      data-plasmic-name={"videoMainThird3"}
                      data-plasmic-override={overrides.videoMainThird3}
                      className={classNames(
                        "__wab_instance",
                        sty.videoMainThird3,
                        {
                          [sty.videoMainThird3tab1]: hasVariant(
                            $state,
                            "tab1",
                            "tab1"
                          )
                        }
                      )}
                      onPressedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "videoMainThird3",
                          "pressed"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      pressed={generateStateValueProp($state, [
                        "videoMainThird3",
                        "pressed"
                      ])}
                      value={"Animovan\u00e1 videa"}
                    />
                  ) : null}
                </PlasmicLink__>
              </section>
              {(hasVariant($state, "entry", "entry") ? true : false) ? (
                <Timer
                  className={classNames("__wab_instance", sty.timer__ize21, {
                    [sty.timerentry__ize21Y9P8G]: hasVariant(
                      $state,
                      "entry",
                      "entry"
                    ),
                    [sty.timertab1__ize21O4BHi]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    )
                  })}
                  intervalSeconds={0.05}
                  isRunning={$state.pageEntry === false ? true : false}
                  onTick={async () => {
                    const $steps = {};

                    $steps["updatePageEntry"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageEntry"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageEntry"] != null &&
                      typeof $steps["updatePageEntry"] === "object" &&
                      typeof $steps["updatePageEntry"].then === "function"
                    ) {
                      $steps["updatePageEntry"] = await $steps[
                        "updatePageEntry"
                      ];
                    }
                  }}
                  runWhileEditing={false}
                />
              ) : null}
              {(hasVariant($state, "tab1", "tab1") ? true : false) ? (
                <Timer
                  className={classNames("__wab_instance", sty.timer__nsc3, {
                    [sty.timertab1__nsc3O4BHi]: hasVariant(
                      $state,
                      "tab1",
                      "tab1"
                    )
                  })}
                  intervalSeconds={0.4}
                  isRunning={$state.h1Render === 1}
                  onTick={async () => {
                    const $steps = {};

                    $steps["updateH1Render"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["h1Render"]
                            },
                            operation: 0,
                            value: 2
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateH1Render"] != null &&
                      typeof $steps["updateH1Render"] === "object" &&
                      typeof $steps["updateH1Render"].then === "function"
                    ) {
                      $steps["updateH1Render"] = await $steps["updateH1Render"];
                    }
                  }}
                  runWhileEditing={false}
                />
              ) : null}
            </div>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml, {
                [sty.embedHtmlentry]: hasVariant($state, "entry", "entry"),
                [sty.embedHtmltab1]: hasVariant($state, "tab1", "tab1")
              })}
              code={
                hasVariant($state, "tab1", "tab1")
                  ? (() => {
                      try {
                        return (() => {
                          if (!$state.pageEntry) {
                            document.removeEventListener(
                              "keyup",
                              galleryKeyListener
                            );
                            document.addEventListener(
                              "keyup",
                              galleryKeyListener
                            );
                            $state.pageEntry = true;
                          }
                          function galleryKeyListener(event) {
                            if (event.key === "Escape") {
                              if ([1, 2, 3].includes($state.pageView)) {
                                $state.pageView = 0;
                                $state.h1Render = 0;
                                $state.videoPlayer.isSet = false;
                              }
                            }
                          }
                          return function galleryKeyListener(event) {
                            if (event.key === "Escape") {
                              if ([1, 2, 3].includes($state.pageView)) {
                                $state.pageView = 0;
                                $state.h1Render = 0;
                                $state.videoPlayer.isSet = false;
                              }
                            }
                          };
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "<div>Paste your embed code via the right sidebar</div>";
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (() => {
                          if (!$state.pageEntry) {
                            document.removeEventListener(
                              "keyup",
                              galleryKeyListener
                            );
                            document.addEventListener(
                              "keyup",
                              galleryKeyListener
                            );
                            $state.pageEntry = true;
                          }
                          function galleryKeyListener(event) {
                            if (event.key === "Escape") {
                              if ([1, 2, 3].includes($state.pageView)) {
                                $state.pageView = 0;
                                $state.h1Render = 0;
                                $state.videoPlayer.isSet = false;
                              }
                            }
                          }
                          return function galleryKeyListener(event) {
                            if (event.key === "Escape") {
                              if ([1, 2, 3].includes($state.pageView)) {
                                $state.pageView = 0;
                                $state.h1Render = 0;
                                $state.videoPlayer.isSet = false;
                              }
                            }
                          };
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "<div>Paste your embed code via the right sidebar</div>";
                        }
                        throw e;
                      }
                    })()
              }
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "videoMainThird",
    "videoPlayer",
    "svg",
    "videoMainThird2",
    "videoMainThird3",
    "embedHtml"
  ],
  header: ["header"],
  videoMainThird: ["videoMainThird"],
  videoPlayer: ["videoPlayer"],
  svg: ["svg"],
  videoMainThird2: ["videoMainThird2"],
  videoMainThird3: ["videoMainThird3"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  videoMainThird: typeof VideoMainThird;
  videoPlayer: typeof VideoPlayer;
  svg: "svg";
  videoMainThird2: typeof VideoMainThird;
  videoMainThird3: typeof VideoMainThird;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideo__VariantsArgs;
    args?: PlasmicVideo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVideo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVideo__ArgProps,
          internalVariantPropNames: PlasmicVideo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVideo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideo";
  } else {
    func.displayName = `PlasmicVideo.${nodeName}`;
  }
  return func;
}

export const PlasmicVideo = Object.assign(
  // Top-level PlasmicVideo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    videoMainThird: makeNodeComponent("videoMainThird"),
    videoPlayer: makeNodeComponent("videoPlayer"),
    svg: makeNodeComponent("svg"),
    videoMainThird2: makeNodeComponent("videoMainThird2"),
    videoMainThird3: makeNodeComponent("videoMainThird3"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicVideo
    internalVariantProps: PlasmicVideo__VariantProps,
    internalArgProps: PlasmicVideo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicVideo;
/* prettier-ignore-end */
