// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rNmfjZwLNAMxE9BRKEpbLN
// Component: cRCW_jKbXDiK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: byOQkj8LrTNy/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: rNmfjZwLNAMxE9BRKEpbLN/projectcss
import sty from "./PlasmicVideo2.module.css"; // plasmic-import: cRCW_jKbXDiK/css

createPlasmicElementProxy;

export type PlasmicVideo2__VariantMembers = {
  tab1: "tab1";
};
export type PlasmicVideo2__VariantsArgs = {
  tab1?: SingleBooleanChoiceArg<"tab1">;
};
type VariantPropType = keyof PlasmicVideo2__VariantsArgs;
export const PlasmicVideo2__VariantProps = new Array<VariantPropType>("tab1");

export type PlasmicVideo2__ArgsType = {};
type ArgPropType = keyof PlasmicVideo2__ArgsType;
export const PlasmicVideo2__ArgProps = new Array<ArgPropType>();

export type PlasmicVideo2__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  freeBox?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultVideo2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVideo2__RenderFunc(props: {
  variants: PlasmicVideo2__VariantsArgs;
  args: PlasmicVideo2__ArgsType;
  overrides: PlasmicVideo2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageEntry",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pageView",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tab1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pageView === 1 ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.tab1
      },
      {
        path: "h1Render",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "videoPath",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.roottab1]: hasVariant($state, "tab1", "tab1") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.headertab1]: hasVariant($state, "tab1", "tab1")
            })}
          />

          <section
            className={classNames(projectcss.all, sty.section__ubeMz, {
              [sty.sectiontab1__ubeMz8FY5A]: hasVariant($state, "tab1", "tab1")
            })}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxtab1]: hasVariant($state, "tab1", "tab1")
              })}
            >
              <section
                className={classNames(projectcss.all, sty.section__bxdNp, {
                  [sty.sectiontab1__bxdNp8FY5A]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateTab1"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["tab1"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTab1"] != null &&
                    typeof $steps["updateTab1"] === "object" &&
                    typeof $steps["updateTab1"].then === "function"
                  ) {
                    $steps["updateTab1"] = await $steps["updateTab1"];
                  }
                }}
              />

              <section
                className={classNames(projectcss.all, sty.section__v3X6U, {
                  [sty.sectiontab1__v3X6U8FY5A]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
              />

              <section
                className={classNames(projectcss.all, sty.section__cxjD, {
                  [sty.sectiontab1__cxjD8FY5A]: hasVariant(
                    $state,
                    "tab1",
                    "tab1"
                  )
                })}
              />
            </div>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml, {
                [sty.embedHtmltab1]: hasVariant($state, "tab1", "tab1")
              })}
              code={(() => {
                try {
                  return (() => {
                    if (!$state.pageEntry) {
                      document.removeEventListener("keyup", galleryKeyListener);
                      document.addEventListener("keyup", galleryKeyListener);
                      $state.pageEntry = true;
                    }
                    function galleryKeyListener(event) {
                      if (event.key === "Escape") {
                        if ([1, 2, 3].includes($state.pageView)) {
                          $state.pageView = 0;
                          $state.h1Render = 0;
                        }
                      }
                    }
                    return function galleryKeyListener(event) {
                      if (event.key === "Escape") {
                        if ([1, 2, 3].includes($state.pageView)) {
                          $state.pageView = 0;
                          $state.h1Render = 0;
                        }
                      }
                    };
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "<div>Paste your embed code via the right sidebar</div>";
                  }
                  throw e;
                }
              })()}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "embedHtml"],
  header: ["header"],
  freeBox: ["freeBox"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideo2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideo2__VariantsArgs;
    args?: PlasmicVideo2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideo2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVideo2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVideo2__ArgProps,
          internalVariantPropNames: PlasmicVideo2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVideo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideo2";
  } else {
    func.displayName = `PlasmicVideo2.${nodeName}`;
  }
  return func;
}

export const PlasmicVideo2 = Object.assign(
  // Top-level PlasmicVideo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicVideo2
    internalVariantProps: PlasmicVideo2__VariantProps,
    internalArgProps: PlasmicVideo2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicVideo2;
/* prettier-ignore-end */
